CO.rij = which(abs(rij) > t.cutoff)
if (length(CO.rij) == 0) {
print("No outliers detected.")
}
the.SWtest = shapiro.test(new.ei)
fit <- aov(Annual ~ Prof * Region, data = salary)
residuals <- residuals(fit)
shapiro.test(residuals)
qqnorm(residuals)
qqline(residuals, col = "red")
#library(car)
leveneTest(Annual ~ Prof * Region, data = salary)
plot(aov.lm$fitted.values, aov.lm$residuals,
main = "Residuals vs. Fitted Values",
xlab = "Fitted Values",
ylab = "Residuals",
pch = 16, col = "black")
abline(h = 0, col = "red", lty = 2)  # Adds reference line
the.SWtest = shapiro.test(new.ei)
fit <- aov(Annual ~ Prof * Region, data = salary)
residuals <- residuals(fit)
shapiro.test(residuals)
qqnorm(residuals)
qqline(residuals, col = "red")
plot(fit$fitted.values, fit$residuals,
main = "Residuals vs. Fitted Values",
xlab = "Fitted Values",
ylab = "Residuals",
pch = 16, col = "blue")
abline(h = 0, col = "red", lty = 2)
plot(fit$fitted.values, fit$residuals,
main = "Residuals vs. Fitted Values",
xlab = "Fitted Values",
ylab = "Residuals",
pch = 16, col = "black")
abline(h = 0, col = "red", lty = 2)
nt = nrow(salary)
a = length(unique(salary$Region))
b = length(unique(salary$Prof))
alpha = 0.05
t.cutoff = qt(1 - alpha / (2 * nt), nt - a - b + 1)
rij = rstandard(fit.anova.inter)
CO.rij = which(abs(rij) > t.cutoff)
if (length(CO.rij) == 0) {
print("No outliers detected.")
}
knitr::opts_chunk$set(echo = TRUE)
# Assuming you have a data frame called 'data' with 'Relief', 'DoseA', and 'DoseB'
# Example dataset
data <- data.frame(
Relief = c(2.48, 4.60, 4.58, 5.45, 8.93, 9.12, 5.97, 10.28, 13.25),  # Relief in hours
DoseA = factor(c("Low", "Med", "High", "Low", "Med", "High", "Low", "Med", "High")),
DoseB = factor(c("Low", "Low", "Low", "Med", "Med", "Med", "High", "High", "High"))
)
# Fit a two-way ANOVA model
model <- aov(Relief ~ DoseA * DoseB, data = data)
# Perform Tukey's HSD test
tukey_results <- TukeyHSD(model)
# Display Tukey's HSD results
summary(tukey_results)
# You can access the Tukey's multiplier from the results
# The multiplier corresponds to the "diff" column, which gives the mean differences between group pairs
# Example dataset
data <- data.frame(
Relief = c(2.48, 4.60, 4.58, 5.45, 8.93, 9.12, 5.97, 10.28, 13.25),  # Relief in hours
DoseA = factor(c("Low", "Med", "High", "Low", "Med", "High", "Low", "Med", "High")),
DoseB = factor(c("Low", "Low", "Low", "Med", "Med", "Med", "High", "High", "High"))
)
# Fit a two-way ANOVA model with the interaction between DoseA and DoseB
model <- aov(Relief ~ DoseA * DoseB, data = data)
# Perform Tukey's HSD test
tukey_results <- TukeyHSD(model)
# Display Tukey's HSD results
summary(tukey_results)
# The Tukey HSD results should show pairwise differences and significance levels
# Creating the example dataset properly
data <- data.frame(
Relief = c(2.48, 4.60, 4.58, 5.45, 8.93, 9.12, 5.97, 10.28, 13.25,
2.48, 4.60, 4.58, 5.45, 8.93, 9.12, 5.97, 10.28, 13.25,
2.48, 4.60, 4.58, 5.45, 8.93, 9.12, 5.97, 10.28, 13.25),  # Relief in hours
DoseA = rep(c("Low", "Med", "High"), each = 4),  # Ensuring 4 replicates for each level of DoseA
DoseB = rep(c("Low", "Med", "High"), times = 4)  # Ensuring 4 replicates for each level of DoseB
)
# Corrected dataset with 12 observations
data <- data.frame(
Relief = c(2.48, 4.60, 4.58, 5.45, 8.93, 9.12, 5.97, 10.28, 13.25,
2.48, 4.60, 4.58),  # Relief in hours (12 values total)
DoseA = factor(c("Low", "Low", "Low", "Med", "Med", "Med", "High", "High", "High",
"Low", "Low", "Low")),  # DoseA levels with 12 observations
DoseB = factor(c("Low", "Med", "High", "Low", "Med", "High", "Low", "Med", "High",
"Low", "Med", "High"))  # DoseB levels with 12 observations
)
# Ensure DoseA and DoseB are factors with proper levels
data$DoseA <- factor(data$DoseA, levels = c("Low", "Med", "High"))
data$DoseB <- factor(data$DoseB, levels = c("Low", "Med", "High"))
# Fit the ANOVA model with interaction between DoseA and DoseB
model <- aov(Relief ~ DoseA * DoseB, data = data)
# Perform Tukey's HSD test
tukey_results <- TukeyHSD(model)
# Display Tukey's HSD results
summary(tukey_results)
# Corrected dataset with 12 observations
data <- data.frame(
Relief = c(2.48, 4.60, 4.58, 5.45, 8.93, 9.12, 5.97, 10.28, 13.25,
2.48, 4.60, 4.58),  # Relief in hours (12 values total)
DoseA = factor(c("Low", "Low", "Low", "Med", "Med", "Med", "High", "High", "High",
"Low", "Low", "Low")),  # DoseA levels with 12 observations
DoseB = factor(c("Low", "Med", "High", "Low", "Med", "High", "Low", "Med", "High",
"Low", "Med", "High"))  # DoseB levels with 12 observations
)
# Ensure DoseA and DoseB are factors with proper levels
data$DoseA <- factor(data$DoseA, levels = c("Low", "Med", "High"))
data$DoseB <- factor(data$DoseB, levels = c("Low", "Med", "High"))
# Fit the ANOVA model with interaction between DoseA and DoseB
model <- aov(Relief ~ DoseA * DoseB, data = data)
# Perform Tukey's HSD test
tukey_results <- TukeyHSD(model)
print(tukey_results)
# Corrected dataset with 12 observations
data <- data.frame(
Relief = c(2.48, 4.60, 4.58, 5.45, 8.93, 9.12, 5.97, 10.28, 13.25,
2.48, 4.60, 4.58),  # Relief in hours (12 values total)
DoseA = factor(c("Low", "Low", "Low", "Med", "Med", "Med", "High", "High", "High",
"Low", "Low", "Low")),  # DoseA levels with 12 observations
DoseB = factor(c("Low", "Med", "High", "Low", "Med", "High", "Low", "Med", "High",
"Low", "Med", "High"))  # DoseB levels with 12 observations
)
# Ensure DoseA and DoseB are factors with proper levels
data$DoseA <- factor(data$DoseA, levels = c("Low", "Med", "High"))
data$DoseB <- factor(data$DoseB, levels = c("Low", "Med", "High"))
# Fit the ANOVA model with interaction between DoseA and DoseB
model <- aov(Relief ~ DoseA * DoseB, data = data)
Tuk = qtukey(1-alpha,a,nt-a)/sqrt(2)
# Corrected dataset with 12 observations
data <- data.frame(
Relief = c(2.48, 4.60, 4.58, 5.45, 8.93, 9.12, 5.97, 10.28, 13.25,
2.48, 4.60, 4.58),  # Relief in hours (12 values total)
DoseA = factor(c("Low", "Low", "Low", "Med", "Med", "Med", "High", "High", "High",
"Low", "Low", "Low")),  # DoseA levels with 12 observations
DoseB = factor(c("Low", "Med", "High", "Low", "Med", "High", "Low", "Med", "High",
"Low", "Med", "High"))  # DoseB levels with 12 observations
)
# Ensure DoseA and DoseB are factors with proper levels
data$DoseA <- factor(data$DoseA, levels = c("Low", "Med", "High"))
data$DoseB <- factor(data$DoseB, levels = c("Low", "Med", "High"))
# Fit the ANOVA model with interaction between DoseA and DoseB
model <- aov(Relief ~ DoseA * DoseB, data = data)
Tuk = qtukey(1-alpha,a,nt-a)/sqrt(2)
Tuk
Tuk = qtukey(1-alpha,a,nt-a)/sqrt(2)
Tuk = qtukey(1-alpha,a,nt-a)/sqrt(2)
Tuk
Tuk = qtukey(1-alpha,a,nt-a)/sqrt(2)
# Corrected dataset with 12 observations
data <- data.frame(
Relief = c(2.48, 4.60, 4.58, 5.45, 8.93, 9.12, 5.97, 10.28, 13.25,
2.48, 4.60, 4.58),  # Relief in hours (12 values total)
DoseA = factor(c("Low", "Low", "Low", "Med", "Med", "Med", "High", "High", "High",
"Low", "Low", "Low")),  # DoseA levels with 12 observations
DoseB = factor(c("Low", "Med", "High", "Low", "Med", "High", "Low", "Med", "High",
"Low", "Med", "High"))  # DoseB levels with 12 observations
)
# Ensure DoseA and DoseB are factors with proper levels
data$DoseA <- factor(data$DoseA, levels = c("Low", "Med", "High"))
data$DoseB <- factor(data$DoseB, levels = c("Low", "Med", "High"))
# Fit the ANOVA model with interaction between DoseA and DoseB
model <- aov(Relief ~ DoseA * DoseB, data = data)
Tuk = qtukey(1-alpha,a,nt-a)/sqrt(2)
# Corrected dataset with 12 observations
data <- data.frame(
Relief = c(2.48, 4.60, 4.58, 5.45, 8.93, 9.12, 5.97, 10.28, 13.25,
2.48, 4.60, 4.58),  # Relief in hours (12 values total)
DoseA = factor(c("Low", "Low", "Low", "Med", "Med", "Med", "High", "High", "High",
"Low", "Low", "Low")),  # DoseA levels with 12 observations
DoseB = factor(c("Low", "Med", "High", "Low", "Med", "High", "Low", "Med", "High",
"Low", "Med", "High"))  # DoseB levels with 12 observations
)
# Ensure DoseA and DoseB are factors with proper levels
data$DoseA <- factor(data$DoseA, levels = c("Low", "Med", "High"))
data$DoseB <- factor(data$DoseB, levels = c("Low", "Med", "High"))
# Fit the ANOVA model with interaction between DoseA and DoseB
model <- aov(Relief ~ DoseA * DoseB, data = data)
alpha = 0.05
Tuk = qtukey(1-alpha,a,nt-a)/sqrt(2)
# Corrected dataset with 12 observations
data <- data.frame(
Relief = c(2.48, 4.60, 4.58, 5.45, 8.93, 9.12, 5.97, 10.28, 13.25,
2.48, 4.60, 4.58),  # Relief in hours (12 values total)
DoseA = factor(c("Low", "Low", "Low", "Med", "Med", "Med", "High", "High", "High",
"Low", "Low", "Low")),  # DoseA levels with 12 observations
DoseB = factor(c("Low", "Med", "High", "Low", "Med", "High", "Low", "Med", "High",
"Low", "Med", "High"))  # DoseB levels with 12 observations
)
# Ensure DoseA and DoseB are factors with proper levels
data$DoseA <- factor(data$DoseA, levels = c("Low", "Med", "High"))
data$DoseB <- factor(data$DoseB, levels = c("Low", "Med", "High"))
# Fit the ANOVA model with interaction between DoseA and DoseB
model <- aov(Relief ~ DoseA * DoseB, data = data)
alpha = 0.05
a= 3
Tuk = qtukey(1-alpha,a,nt-a)/sqrt(2)
# Corrected dataset with 12 observations
data <- data.frame(
Relief = c(2.48, 4.60, 4.58, 5.45, 8.93, 9.12, 5.97, 10.28, 13.25,
2.48, 4.60, 4.58),  # Relief in hours (12 values total)
DoseA = factor(c("Low", "Low", "Low", "Med", "Med", "Med", "High", "High", "High",
"Low", "Low", "Low")),  # DoseA levels with 12 observations
DoseB = factor(c("Low", "Med", "High", "Low", "Med", "High", "Low", "Med", "High",
"Low", "Med", "High"))  # DoseB levels with 12 observations
)
# Ensure DoseA and DoseB are factors with proper levels
data$DoseA <- factor(data$DoseA, levels = c("Low", "Med", "High"))
data$DoseB <- factor(data$DoseB, levels = c("Low", "Med", "High"))
# Fit the ANOVA model with interaction between DoseA and DoseB
model <- aov(Relief ~ DoseA * DoseB, data = data)
# Perform Tukey's HSD test
tukey_results <- TukeyHSD(model)
print(tuke)
# Corrected dataset with 12 observations
data <- data.frame(
Relief = c(2.48, 4.60, 4.58, 5.45, 8.93, 9.12, 5.97, 10.28, 13.25,
2.48, 4.60, 4.58),  # Relief in hours (12 values total)
DoseA = factor(c("Low", "Low", "Low", "Med", "Med", "Med", "High", "High", "High",
"Low", "Low", "Low")),  # DoseA levels with 12 observations
DoseB = factor(c("Low", "Med", "High", "Low", "Med", "High", "Low", "Med", "High",
"Low", "Med", "High"))  # DoseB levels with 12 observations
)
# Ensure DoseA and DoseB are factors with proper levels
data$DoseA <- factor(data$DoseA, levels = c("Low", "Med", "High"))
data$DoseB <- factor(data$DoseB, levels = c("Low", "Med", "High"))
# Fit the ANOVA model with interaction between DoseA and DoseB
model <- aov(Relief ~ DoseA * DoseB, data = data)
# Perform Tukey's HSD test
tukey_results <- TukeyHSD(model)
print(tukey_results)
knitr::opts_chunk$set(echo = TRUE)
# Corrected dataset with 12 observations
data <- data.frame(
Relief = c(2.48, 4.60, 4.58, 5.45, 8.93, 9.12, 5.97, 10.28, 13.25,
2.48, 4.60, 4.58),  # Relief in hours (12 values total)
DoseA = factor(c("Low", "Low", "Low", "Med", "Med", "Med", "High", "High", "High",
"Low", "Low", "Low")),  # DoseA levels with 12 observations
DoseB = factor(c("Low", "Med", "High", "Low", "Med", "High", "Low", "Med", "High",
"Low", "Med", "High"))  # DoseB levels with 12 observations
)
# Ensure DoseA and DoseB are factors with proper levels
data$DoseA <- factor(data$DoseA, levels = c("Low", "Med", "High"))
data$DoseB <- factor(data$DoseB, levels = c("Low", "Med", "High"))
# Fit the ANOVA model with interaction between DoseA and DoseB
model <- aov(Relief ~ DoseA * DoseB, data = data)
# Perform Tukey's HSD test
tukey_results <- TukeyHSD(model)
print(tukey_results)
# Group means and sample sizes for DoseA and DoseB combinations
group.means <- matrix(c(2.48, 4.60, 4.58,   # DoseA = Low
5.45, 8.93, 9.12,   # DoseA = Med
5.97, 10.28, 13.25), # DoseA = High
nrow = 3, byrow = TRUE)
group.nis <- matrix(c(4, 4, 4,   # DoseA = Low
4, 4, 4,   # DoseA = Med
4, 4, 4),  # DoseA = High
nrow = 3, byrow = TRUE)
# Convert group means and nis into data frame for linear model
doseA <- factor(rep(c("Low", "Med", "High"), each = 3))
doseB <- factor(rep(c("Low", "Med", "High"), times = 3))
pain <- c(2.48, 4.60, 4.58, 5.45, 8.93, 9.12, 5.97, 10.28, 13.25)
# Create the dataset
migraine <- data.frame(pain, doseA, doseB)
# Number of groups and total sample size
nt = sum(group.nis)
a = length(unique(doseA))
# Significance level
alpha = 0.05
# Calculate Tukey multiplier
Tuk = qtukey(1 - alpha, a, nt - a) / sqrt(2)
Tuk  # Print the Tukey multiplier
View(model)
View(tukey_results)
View(group.means)
View(group.nis)
View(group.means)
library(shiny)
library(tidyverse)
library(shinydashboard)
totals <- read.csv("/Users/hiyabhandari/Desktop/BIS15W2025_group13/conditions_states.csv")
ui <- dashboardPage(
dashboardHeader(title = "COVID-19 Death Trends"),
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("chart-line")),
radioButtons("condition_select",
"Select Condition Group",
choices = c("Respiratory diseases", "Circulatory diseases"),
selected = "Respiratory diseases"),
radioButtons("age_group_select",
"Select Age Group",
choices = unique(totals$age_group)[!unique(totals$age_group) %in% c("Not stated", "All ages")],
selected = "0-24")
)
),
dashboardBody(
fluidRow(
box(
title = "COVID-19 Deaths Trend",
status = "primary", solidHeader = TRUE, width = 12,
plotOutput("death_line_plot", height = 500)
)
),
fluidRow(
box(
title = "Data Summary",
status = "info", solidHeader = TRUE, width = 12,
tableOutput("summary_table")
)
)
)
)
server <- function(input, output, session) {
filtered_data <- reactive({
totals %>%
filter(condition_group == input$condition_select,
age_group == input$age_group_select) %>%
drop_na(covid_19_deaths, start_date) %>%
mutate(start_date = as.Date(start_date, format = "%m/%d/%Y"))
})
output$death_line_plot <- renderPlot({
data <- filtered_data()
ggplot(data, aes(x = start_date, y = covid_19_deaths, color = condition)) +
geom_line() +
labs(title = paste("COVID-19 Death Trend for", input$condition_select, "in Age Group", input$age_group_select),
x = "Date", y = "COVID-19 Deaths") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
output$summary_table <- renderTable({
data <- filtered_data()
summary_data <- data %>%
group_by(condition, age_group) %>%
summarise(total_deaths = sum(covid_19_deaths, na.rm = TRUE), .groups = 'drop')
summary_data
})
}
shinyApp(ui, server)
g=3
B = qt(1-alpha/(2*g),nt-a)
g=3
B = qt(1-alpha/(2*g),nt-a)
B
g=2
B = qt(1-alpha/(2*g),nt-a)
B
library(shiny)
library(tidyverse)
library(shinydashboard)
totals <- read.csv("data/conditions_states.csv")
library(shiny)
library(tidyverse)
library(shinydashboard)
totals <- read.csv("/Users/hiyabhandari/Desktop/BIS15W2025_group13/conditions_states.csv")
ui <- dashboardPage(
dashboardHeader(title = "COVID-19 Death Trends"),
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("chart-line")),
radioButtons("condition_select",
"Select Condition Group",
choices = c("Respiratory diseases", "Circulatory diseases"),
selected = "Respiratory diseases"),
radioButtons("age_group_select",
"Select Age Group",
choices = unique(totals$age_group)[!unique(totals$age_group) %in% c("Not stated", "All ages")],
selected = "0-24")
)
),
dashboardBody(
fluidRow(
box(
title = "COVID-19 Deaths Trend",
status = "primary", solidHeader = TRUE, width = 12,
plotOutput("death_line_plot", height = 500)
)
),
fluidRow(
box(
title = "Data Summary",
status = "info", solidHeader = TRUE, width = 12,
tableOutput("summary_table")
)
)
)
)
server <- function(input, output, session) {
filtered_data <- reactive({
totals %>%
filter(condition_group == input$condition_select,
age_group == input$age_group_select) %>%
drop_na(covid_19_deaths, start_date) %>%
mutate(start_date = as.Date(start_date, format = "%m/%d/%Y"))
})
output$death_line_plot <- renderPlot({
data <- filtered_data()
ggplot(data, aes(x = start_date, y = covid_19_deaths, color = condition)) +
geom_line() +
labs(title = paste("COVID-19 Death Trend for", input$condition_select, "in Age Group", input$age_group_select),
x = "Date", y = "COVID-19 Deaths") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
output$summary_table <- renderTable({
data <- filtered_data()
summary_data <- data %>%
group_by(condition, age_group) %>%
summarise(total_deaths = sum(covid_19_deaths, na.rm = TRUE), .groups = 'drop')
summary_data
})
}
shinyApp(ui, server)
library(shiny)
library(tidyverse)
library(shinydashboard)
totals <- read.csv("data/conditions_states.csv")
runApp('Desktop/BIS15W2025_group13/Kotomi/v1_conditions_breakdown_app.R')
library(shiny)
library(tidyverse)
library(shinydashboard)
totals <- read.csv("data/conditions_states.csv")
getwd()
getwd("data/conditions_states.csv")
setwd("data/conditions_states.csv")
library(shiny)
library(tidyverse)
library(shinydashboard)
totals <- read.csv("data/conditions_states.csv")
library(shiny)
library(tidyverse)
library(shinydashboard)
totals <- read.csv("/Users/hiyabhandari/Desktop/BIS15W2025_group13/conditions_states.csv")
ui <- dashboardPage(
dashboardHeader(title = "COVID-19 Death Trends"),
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("chart-line")),
radioButtons("condition_select",
"Select Condition Group",
choices = c("Respiratory diseases", "Circulatory diseases"),
selected = "Respiratory diseases"),
radioButtons("age_group_select",
"Select Age Group",
choices = unique(totals$age_group)[!unique(totals$age_group) %in% c("Not stated", "All ages")],
selected = "0-24")
)
),
dashboardBody(
fluidRow(
box(
title = "COVID-19 Deaths Trend",
status = "primary", solidHeader = TRUE, width = 12,
plotOutput("death_line_plot", height = 500)
)
),
fluidRow(
box(
title = "Data Summary",
status = "info", solidHeader = TRUE, width = 12,
tableOutput("summary_table")
)
)
)
)
server <- function(input, output, session) {
filtered_data <- reactive({
totals %>%
filter(condition_group == input$condition_select,
age_group == input$age_group_select) %>%
drop_na(covid_19_deaths, start_date) %>%
mutate(start_date = as.Date(start_date, format = "%m/%d/%Y"))
})
output$death_line_plot <- renderPlot({
data <- filtered_data()
ggplot(data, aes(x = start_date, y = covid_19_deaths, color = condition)) +
geom_line() +
labs(title = paste("COVID-19 Death Trend for", input$condition_select, "in Age Group", input$age_group_select),
x = "Date", y = "COVID-19 Deaths") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
output$summary_table <- renderTable({
data <- filtered_data()
summary_data <- data %>%
group_by(condition, age_group) %>%
summarise(total_deaths = sum(covid_19_deaths, na.rm = TRUE), .groups = 'drop')
summary_data
})
}
shinyApp(ui, server)
library(shiny)
library(tidyverse)
library(shinydashboard)
totals <- read.csv("data/conditions_states2.csv")
knitr::opts_chunk$set(echo = TRUE)
totals <- read.csv("data/totals_states_conditions.csv")
```
runApp('Desktop/BIS15W2025_group13/Hiya/shinyappconditions.R')
runApp('Desktop/BIS15W2025_group13/Kotomi/v1_conditions_breakdown_app.R')
runApp('Desktop/BIS15W2025_group13/Kotomi/v1_conditions_breakdown_app.R')
runApp('Desktop/BIS15W2025_group13/Kotomi/v1_conditions_breakdown_app.R')
runApp('Desktop/BIS15W2025_group13/Kotomi/v1_conditions_breakdown_app.R')
runApp('Desktop/BIS15W2025_group13/Kotomi/v1_conditions_breakdown_app.R')
runApp('Desktop/BIS15W2025_group13/Hiya/shinyappconditions.R')
runApp('Desktop/BIS15W2025_group13/Kotomi/v1_conditions_breakdown_app.R')
runApp('Desktop/BIS15W2025_group13/Kotomi/v1_conditions_breakdown_app.R')
runApp('Desktop/BIS15W2025_group13/Kotomi/v1_conditions_breakdown_app.R')
