scale_color_brewer(palette = "Paired") +  # Use Paired color palette
labs(title = "COVID-19 Vaccination Trends in the U.S. (2021-2023)",
x = "Date", y = "Sample Size",
color = "Vaccination Category") +
theme_minimal() +
scale_x_date(date_labels = "%b %Y", date_breaks = "1 month") +
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
library(dplyr)
library(lubridate)
COVID_vaccines_new %>%
filter(Indicator.Category %in% c("Vaccinated (>=1 dose)",
"Received updated bivalent booster dose (among adults who completed primary series)")) %>%
filter(Geography == "National") %>%
group_by(Indicator.Category, start_date, Year) %>%
summarise(Sample.Size = sum(Sample.Size), .groups = "drop") %>%
mutate(start_date = paste(start_date, Year),
start_date = mdy(start_date)) %>%
ggplot(aes(x = start_date, y = Sample.Size, color = Indicator.Category)) +
geom_line(size = 1.2) +  # Adjust line thickness for better visibility
scale_color_brewer(palette = "Paired") +  # Use Paired color palette
labs(title = "COVID-19 Vaccination Trends in the U.S. (2021-2023)",
x = "Date", y = "Sample Size",
color = "Vaccination Category") +
theme_minimal() +
scale_x_date(date_labels = "%b %Y", date_breaks = "1 month") +
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 45, hjust = 0.5))
library(ggplot2)
library(dplyr)
library(lubridate)
COVID_vaccines_new %>%
filter(Indicator.Category %in% c("Vaccinated (>=1 dose)",
"Received updated bivalent booster dose (among adults who completed primary series)")) %>%
filter(Geography == "National") %>%
group_by(Indicator.Category, start_date, Year) %>%
summarise(Sample.Size = sum(Sample.Size), .groups = "drop") %>%
mutate(start_date = paste(start_date, Year),
start_date = mdy(start_date)) %>%
ggplot(aes(x = start_date, y = Sample.Size, color = Indicator.Category)) +
geom_line(size = 1.2) +  # Adjust line thickness for better visibility
scale_color_brewer(palette = "Paired") +  # Use Paired color palette
labs(title = "COVID-19 Vaccination Trends in the U.S. (2021-2023)",
x = "Date", y = "Sample Size",
color = "Vaccination Category") +
theme_minimal() +
scale_x_date(date_labels = "%b %Y", date_breaks = "1 month") +
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
library(dplyr)
library(lubridate)
COVID_vaccines_new %>%
filter(Indicator.Category %in% c("Vaccinated (>=1 dose)",
"Received updated bivalent booster dose (among adults who completed primary series)")) %>%
filter(Geography == "National") %>%
group_by(Indicator.Category, start_date, Year) %>%
summarise(Sample.Size = sum(Sample.Size), .groups = "drop") %>%
mutate(start_date = paste(start_date, Year),
start_date = mdy(start_date)) %>%
ggplot(aes(x = start_date, y = Sample.Size, color = Indicator.Category)) +
geom_line(size = 1.2) +  # Adjust line thickness for better visibility
scale_color_brewer(palette = "Paired") +  # Use Paired color palette
labs(title = "COVID-19 Vaccination Trends in the U.S. (2021-2023)",
x = "Date", y = "Sample Size",
color = "Vaccination Category") +
theme_minimal() +
scale_x_date(date_labels = "%b %Y", date_breaks = "1 month") +
theme(legend.position = "bottom",
legend.text = element_text(size = 8),  # Reduce legend text size
legend.title = element_text(size = 9),  # Reduce legend title size
axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
library(dplyr)
library(lubridate)
COVID_vaccines_new %>%
filter(Indicator.Category %in% c("Vaccinated (>=1 dose)",
"Received updated bivalent booster dose (among adults who completed primary series)")) %>%
filter(Geography == "National") %>%
group_by(Indicator.Category, start_date, Year) %>%
summarise(Sample.Size = sum(Sample.Size), .groups = "drop") %>%
mutate(start_date = paste(start_date, Year),
start_date = mdy(start_date)) %>%
ggplot(aes(x = start_date, y = Sample.Size, color = Indicator.Category)) +
geom_line(size = 1.2) +  # Adjust line thickness for better visibility
scale_color_brewer(palette = "Paired") +  # Use Paired color palette
labs(title = "COVID-19 Vaccination Trends in the U.S. (2021-2023)",
x = "Date", y = "Sample Size",
color = "Vaccination Category") +
theme_minimal() +
scale_x_date(date_labels = "%b %Y", date_breaks = "1 month") +
theme(legend.position = "bottom",
legend.text = element_text(size = 4),  # Reduce legend text size
legend.title = element_text(size = 9),  # Reduce legend title size
axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
library(dplyr)
library(lubridate)
COVID_vaccines_new %>%
filter(Indicator.Category %in% c("Vaccinated (>=1 dose)",
"Received updated bivalent booster dose (among adults who completed primary series)")) %>%
filter(Geography == "National") %>%
group_by(Indicator.Category, start_date, Year) %>%
summarise(Sample.Size = sum(Sample.Size), .groups = "drop") %>%
mutate(start_date = paste(start_date, Year),
start_date = mdy(start_date)) %>%
ggplot(aes(x = start_date, y = Sample.Size, color = Indicator.Category)) +
geom_line(size = 1.2) +  # Adjust line thickness for better visibility
scale_color_brewer(palette = "Paired") +  # Use Paired color palette
labs(title = "COVID-19 Vaccination Trends in the U.S. (2021-2023)",
x = "Date", y = "Sample Size",
color = "Vaccination Category") +
theme_minimal() +
scale_x_date(date_labels = "%b %Y", date_breaks = "1 month") +
theme(legend.position = "bottom",
legend.text = element_text(size = 6),  # Reduce legend text size
legend.title = element_text(size = 9),  # Reduce legend title size
axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
library(dplyr)
library(lubridate)
COVID_vaccines_new %>%
filter(Indicator.Category %in% c("Vaccinated (>=1 dose)",
"Received updated bivalent booster dose (among adults who completed primary series)")) %>%
filter(Geography == "National") %>%
group_by(Indicator.Category, start_date, Year) %>%
summarise(Sample.Size = sum(Sample.Size), .groups = "drop") %>%
mutate(start_date = paste(start_date, Year),
start_date = mdy(start_date)) %>%
ggplot(aes(x = start_date, y = Sample.Size, color = Indicator.Category)) +
geom_line(size = 1.2) +  # Adjust line thickness for better visibility
scale_color_brewer(palette = "Paired") +  # Use Paired color palette
labs(title = "COVID-19 Vaccination Trends in the U.S. (2021-2023)",
x = "Date", y = "Sample Size",
color = "Vaccination Category") +
theme_minimal() +
scale_x_date(date_labels = "%b %Y", date_breaks = "1 month") +
theme(legend.position = "bottom",
legend.text = element_text(size = 7),  # Reduce legend text size
legend.title = element_text(size = 9),  # Reduce legend title size
axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
library(dplyr)
library(lubridate)
COVID_vaccines_new %>%
filter(Indicator.Category %in% c("Vaccinated (>=1 dose)",
"Received updated bivalent booster dose (among adults who completed primary series)")) %>%
filter(Geography == "National") %>%
group_by(Indicator.Category, start_date, Year) %>%
summarise(Sample.Size = sum(Sample.Size), .groups = "drop") %>%
mutate(start_date = paste(start_date, Year),
start_date = mdy(start_date)) %>%
ggplot(aes(x = start_date, y = Sample.Size, color = Indicator.Category)) +
geom_line(size = 1.2) +  # Adjust line thickness for better visibility
scale_color_brewer(palette = "Paired") +  # Use Paired color palette
labs(title = "COVID-19 Vaccination Trends in the U.S. (2021-2023)",
x = "Date", y = "Sample Size",
color = "Vaccination Category") +
theme_minimal() +
scale_x_date(date_labels = "%b %Y", date_breaks = "1 month") +
theme(legend.position = "bottom",
legend.text = element_text(size = 6),  # Reduce legend text size
legend.title = element_text(size = 9),  # Reduce legend title size
axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
library(dplyr)
library(lubridate)
COVID_vaccines_new %>%
filter(Indicator.Category %in% c("Vaccinated (>=1 dose)",
"Received updated bivalent booster dose (among adults who completed primary series)")) %>%
filter(Geography == "National") %>%
group_by(Indicator.Category, start_date, Year) %>%
summarise(Sample.Size = sum(Sample.Size), .groups = "drop") %>%
mutate(start_date = paste(start_date, Year),
start_date = mdy(start_date)) %>%
ggplot(aes(x = start_date, y = Sample.Size, color = Indicator.Category)) +
geom_line(size = 1.2) +  # Adjust line thickness for better visibility
scale_color_brewer(palette = "Paired") +  # Use Paired color palette
labs(title = "COVID-19 Vaccination Trends in the U.S. (2021-2023)",
x = "Date", y = "Sample Size",
color = "Vaccination Category") +
theme_minimal() +
scale_x_date(date_labels = "%b %Y", date_breaks = "1 month") +
theme(legend.position = "bottom",
legend.text = element_text(size = 7),  # Reduce legend text size
legend.title = element_text(size = 9),  # Reduce legend title size
axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
library(dplyr)
library(lubridate)
COVID_vaccines_new %>%
filter(Indicator.Category %in% c("Vaccinated (>=1 dose)",
"Received updated bivalent booster dose (among adults who completed primary series)")) %>%
filter(Geography == "National") %>%
group_by(Indicator.Category, start_date, Year) %>%
summarise(Sample.Size = sum(Sample.Size), .groups = "drop") %>%
mutate(start_date = paste(start_date, Year),
start_date = mdy(start_date)) %>%
ggplot(aes(x = start_date, y = Sample.Size, color = Indicator.Category)) +
geom_line(size = 1.2) +  # Adjust line thickness for better visibility
scale_color_brewer(palette = "Paired") +  # Use Paired color palette
labs(title = "Trends in COVID-19 Vaccination and Booster Shots in the U.S. (2021-2023)",
x = "Date", y = "Population Size",
color = "Vaccination Category") +
theme_minimal() +
scale_x_date(date_labels = "%b %Y", date_breaks = "1 month") +
theme(legend.position = "bottom",
legend.text = element_text(size = 7),  # Reduce legend text size
legend.title = element_text(size = 9),  # Reduce legend title size
axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
library(dplyr)
library(lubridate)
COVID_vaccines_new %>%
filter(Indicator.Category %in% c("Vaccinated (>=1 dose)",
"Received updated bivalent booster dose (among adults who completed primary series)")) %>%
#filter(Geography == "National") %>%
group_by(Indicator.Category, start_date, Year) %>%
summarise(Sample.Size = sum(Sample.Size), .groups = "drop") %>%
mutate(start_date = paste(start_date, Year),
start_date = mdy(start_date)) %>%
ggplot(aes(x = start_date, y = Sample.Size, color = Indicator.Category)) +
geom_line(size = 1.2) +  # Adjust line thickness for better visibility
scale_color_brewer(palette = "Paired") +  # Use Paired color palette
labs(title = "Trends in COVID-19 Vaccination and Booster Shots in the U.S. (2021-2023)",
x = "Date", y = "Population Size",
color = "Vaccination Category") +
theme_minimal() +
scale_x_date(date_labels = "%b %Y", date_breaks = "1 month") +
theme(legend.position = "bottom",
legend.text = element_text(size = 7),  # Reduce legend text size
legend.title = element_text(size = 9),  # Reduce legend title size
axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
library(dplyr)
library(lubridate)
COVID_vaccines_new %>%
filter(Indicator.Category %in% c("Vaccinated (>=1 dose)",
"Received updated bivalent booster dose (among adults who completed primary series)")) %>%
filter(Geography == "National") %>%
group_by(Indicator.Category, start_date, Year) %>%
summarise(Sample.Size = sum(Sample.Size), .groups = "drop") %>%
mutate(start_date = paste(start_date, Year),
start_date = mdy(start_date)) %>%
ggplot(aes(x = start_date, y = Sample.Size, color = Indicator.Category)) +
geom_line(size = 1.2) +  # Adjust line thickness for better visibility
scale_color_brewer(palette = "Paired") +  # Use Paired color palette
labs(title = "Trends in COVID-19 Vaccination and Booster Shots in the U.S. (2021-2023)",
x = "Date", y = "Population Size",
color = "Vaccination Category") +
theme_minimal() +
scale_x_date(date_labels = "%b %Y", date_breaks = "1 month") +
theme(legend.position = "bottom",
legend.text = element_text(size = 7),  # Reduce legend text size
legend.title = element_text(size = 9),  # Reduce legend title size
axis.text.x = element_text(angle = 45, hjust = 1))
totals <- read.csv("data/conditions_states.csv")
ui <- dashboardPage(
dashboardHeader(title = "COVID-19 Death Trends"),
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("chart-line")),
radioButtons("condition_select",
"Select Condition Group",
choices = c("Respiratory diseases", "Circulatory diseases"),
selected = "Respiratory diseases"),
radioButtons("age_group_select",
"Select Age Group",
choices = unique(totals$age_group)[!unique(totals$age_group) %in% c("Not stated", "All ages")],
selected = "0-24")
)
),
dashboardBody(
fluidRow(
box(
title = "COVID-19 Deaths Trend",
status = "primary", solidHeader = TRUE, width = 12,
plotOutput("death_line_plot", height = 500)
)
),
fluidRow(
box(
title = "Data Summary",
status = "info", solidHeader = TRUE, width = 12,
tableOutput("summary_table")
)
)
)
)
server <- function(input, output, session) {
filtered_data <- reactive({
totals %>%
filter(condition_group == input$condition_select,
age_group == input$age_group_select) %>%
drop_na(covid_19_deaths, start_date) %>%
mutate(start_date = as.Date(start_date, format = "%m/%d/%Y"))
})
output$death_line_plot <- renderPlot({
data <- filtered_data()
ggplot(data, aes(x = start_date, y = covid_19_deaths, color = condition)) +
geom_line() +
labs(title = paste("COVID-19 Death Trend for", input$condition_select, "in Age Group", input$age_group_select),
x = "Date", y = "COVID-19 Deaths") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
output$summary_table <- renderTable({
data <- filtered_data()
summary_data <- data %>%
group_by(condition, age_group) %>%
summarise(total_deaths = sum(covid_19_deaths, na.rm = TRUE), .groups = 'drop')
summary_data
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "COVID-19 Death Trends"),
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("chart-line")),
radioButtons("condition_select",
"Select Condition Group",
choices = c("Respiratory diseases", "Circulatory diseases"),
selected = "Respiratory diseases"),
radioButtons("age_group_select",
"Select Age Group",
choices = unique(totals$age_group)[!unique(totals$age_group) %in% c("Not stated", "All ages")],
selected = "0-24")
)
),
dashboardBody(
fluidRow(
box(
title = "COVID-19 Deaths Trend",
status = "primary", solidHeader = TRUE, width = 12,
plotOutput("death_line_plot", height = 500)
)
),
fluidRow(
box(
title = "Data Summary",
status = "info", solidHeader = TRUE, width = 12,
tableOutput("summary_table")
)
)
)
)
server <- function(input, output, session) {
filtered_data <- reactive({
totals %>%
filter(condition_group == input$condition_select,
age_group == input$age_group_select) %>%
drop_na(covid_19_deaths, start_date) %>%
mutate(start_date = as.Date(start_date, format = "%m/%d/%Y"))
})
output$death_line_plot <- renderPlot({
data <- filtered_data()
ggplot(data, aes(x = start_date, y = covid_19_deaths, color = condition)) +
geom_line() +
labs(title = paste("COVID-19 Death Trend for", input$condition_select, "in Age Group", input$age_group_select),
x = "Date", y = "COVID-19 Deaths") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
output$summary_table <- renderTable({
data <- filtered_data()
summary_data <- data %>%
group_by(condition, age_group) %>%
summarise(total_deaths = sum(covid_19_deaths, na.rm = TRUE), .groups = 'drop')
summary_data
})
}
shinyApp(ui, server)
library(shiny); runApp('~/Desktop/BIS15W2025_group13/Kotomi/v1_conditions_breakdown_app.R')
runApp('~/Desktop/BIS15W2025_group13/Kotomi/v1_conditions_breakdown_app.R')
# Load data
totals <- read.csv("/Users/sanch/Desktop/BIS15W2025_group13/conditions_states.csv")
# UI with shinydashboard
ui <- dashboardPage(
dashboardHeader(title = "COVID-19 Death Analysis"),
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("chart-bar")),
radioButtons("y",
"Select Condition Group",
choices = c("Respiratory diseases", "Circulatory diseases"),
selected = "Respiratory diseases",
inline = TRUE),
radioButtons("x",
"Select X Variable",
choices = c("state", "age_group"),
selected = "state",
inline = TRUE)
)
),
dashboardBody(
fluidRow(
box(
title = "COVID-19 Deaths Breakdown",
status = "primary", solidHeader = TRUE, width = 12,
plotOutput("plot", height = 500)
)
),
fluidRow(
box(
title = "Data Summary",
status = "info", solidHeader = TRUE, width = 12,
textOutput("summary")
)
)
)
)
# Server function
server <- function(input, output, session) {
output$plot <- renderPlot({
totals %>%
filter(condition_group == input$y) %>%
group_by(.data[[input$x]], condition) %>%
summarise(deaths = sum(covid_19_deaths, na.rm = TRUE), .groups = 'drop') %>%
ggplot(aes(x = factor(.data[[input$x]]), y = deaths, fill = condition)) +
geom_col(position = position_fill()) +
scale_y_continuous(labels = scales::percent_format(scale = 1)) +
scale_fill_brewer(palette = "Set2", labels = function(x) str_wrap(x, width = 40)) +
theme_minimal() +
labs(title = "% Breakdown of Conditions Associated with COVID-19 Deaths",
x = input$x,
y = NULL,
fill = "Condition") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotating x-axis labels for better readability
})
output$summary <- renderText({
filtered_data <- totals %>%
filter(condition_group == input$y) %>%
group_by(.data[[input$x]], condition) %>%
summarise(deaths = sum(covid_19_deaths, na.rm = TRUE), .groups = 'drop')
total_deaths <- sum(filtered_data$deaths)
paste("Total deaths in selected group and category:", format(total_deaths, big.mark = ","), "\n",
"Number of unique states or age groups:", length(unique(filtered_data[[input$x]])), "\n",
"Data includes", nrow(filtered_data), "records.")
})
}
# Run the app
shinyApp(ui, server)
# Load data
totals <- read.csv("data/conditions_states.csv")
# UI with shinydashboard
ui <- dashboardPage(
dashboardHeader(title = "COVID-19 Death Analysis"),
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("chart-bar")),
radioButtons("y",
"Select Condition Group",
choices = c("Respiratory diseases", "Circulatory diseases"),
selected = "Respiratory diseases",
inline = TRUE),
radioButtons("x",
"Select X Variable",
choices = c("state", "age_group"),
selected = "state",
inline = TRUE)
)
),
dashboardBody(
fluidRow(
box(
title = "COVID-19 Deaths Breakdown",
status = "primary", solidHeader = TRUE, width = 12,
plotOutput("plot", height = 500)
)
),
fluidRow(
box(
title = "Data Summary",
status = "info", solidHeader = TRUE, width = 12,
textOutput("summary")
)
)
)
)
# Server function
server <- function(input, output, session) {
output$plot <- renderPlot({
totals %>%
filter(condition_group == input$y) %>%
group_by(.data[[input$x]], condition) %>%
summarise(deaths = sum(covid_19_deaths, na.rm = TRUE), .groups = 'drop') %>%
ggplot(aes(x = factor(.data[[input$x]]), y = deaths, fill = condition)) +
geom_col(position = position_fill()) +
scale_y_continuous(labels = scales::percent_format(scale = 1)) +
scale_fill_brewer(palette = "Set2", labels = function(x) str_wrap(x, width = 40)) +
theme_minimal() +
labs(title = "% Breakdown of Conditions Associated with COVID-19 Deaths",
x = input$x,
y = NULL,
fill = "Condition") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotating x-axis labels for better readability
})
output$summary <- renderText({
filtered_data <- totals %>%
filter(condition_group == input$y) %>%
group_by(.data[[input$x]], condition) %>%
summarise(deaths = sum(covid_19_deaths, na.rm = TRUE), .groups = 'drop')
total_deaths <- sum(filtered_data$deaths)
paste("Total deaths in selected group and category:", format(total_deaths, big.mark = ","), "\n",
"Number of unique states or age groups:", length(unique(filtered_data[[input$x]])), "\n",
"Data includes", nrow(filtered_data), "records.")
})
}
# Run the app
shinyApp(ui, server)
